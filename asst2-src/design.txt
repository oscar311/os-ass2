The design of our solution for assignment 2 can be broken down into several components:
1.  Understanding the Syscall code and various header files
2.  Setting up standard file descriptors
3.  Writing each syscall function

~~~~~~~~~~~~~~~~~~~~~ file system data structure ~~~~~~~~~~~~~~~~~~~~~

We use a array of node which have been defined in file.h, the nodes consist of:
    - fd = file descriptor
    - isDup = bool if its a dup
    - offset = offset in file
    - type = whether its a std or just a regular file
    - vnode = the v node representing the contents of the file
    - dup = a linked list of duplicates 
    - f_lock = a lock used for sharing resources


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ syscall.c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

syscall.c required us to implement the switch case statements for each syscall
this involved:
    1. switch statement for each syscall
    2. passing in the parameters from the trap frame 
    3. returning the correct return value and passing the error code in if something failed

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ runprogram.c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

the only change made to runprogram.c involve



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ file.c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~open~~~~ 

    man page - http://man7.org/linux/man-pages/man2/open.2.html

    int open(const char *filename, int flags)
    - filename = name of file
    - flags = flags that need to be given to vfs_open()

    - open a file if syscall == "SYS_open"
        -> scan through file table to look for an available slot
        -> once found call init_node no duplicate and offset will be 0
        -> update the contents of the node 
        -> call vfs_open() inside a lock
        -> Call VOP_EACHOPEN() in a lock.

Errors to handle
-   vfs_open returning an error number
-   VOP_EACHOPEN returning an error number

~~~~read~~~~

    man page - http://man7.org/linux/man-pages/man2/read.2.html
    
    ssize_t read(int fd, void *buf, size_t count)

    - fd = file descriptor
    - buf = buffer data will be put into to be read
    - count = number of bytes to be read

    - read a file if syscall == "SYS_read"
        -> init buffer to read into
        -> check valid file handler (has to be > 2, not null or 1 = stdout or 2 = stderr (write only) )
        -> get stats for file VOP_STAT() inside a lock of the file
        -> check we have bytes to read
        -> set up UIO (unique Input/Output) for kernel I/O and read bytes into it mk_kuio() & VOP_READ() (don't forget to check error)
        -> update offset + dups
        -> copy out to userland copyout()
        -> return bytes read

Errors to handle
-   VOP_READ returning an error number

~~~~write~~~~

    man page - http://man7.org/linux/man-pages/man2/write.2.html
    
    ssize_t write(int fd, const void *buf, size_t count))

    - fd = file descriptor 
    - buf = date to be written 
    - count = number of bytes  

    - write from a buffer to a file if syscall == "SYS_write"
        -> allocate space for the buffer 
        -> check valid file handler,  != 0 as this is stdin (read only)
        -> check the file descriptor given is valid in the filetable
        -> copy the date from userland to kernelspace, using copyin()
        -> set up UIO (unique Input/Output) for kernel I/O and write bytes into it mk_kuio() & VOP_WRITE() (don't forget to check error)
        -> update offset + dups
        -> return bytes written

Errors to handle
-   Copyin() returning an error number when copying the data from the buf parameter to the newly allocated buffer.
-   VOP_WRITE  returning an error number

~~~~lseek ~~~~

    man page - http://man7.org/linux/man-pages/man2/lseek.2.html

    off_t lseek(int fd, off_t offset, int whence)

    - fd = file descriptor 
    - offset = offset that we will be repositioning by
    - whence = directive either = SEEK_SET (set offset to offset many bytes), SEEK_CUR (offset is set to current loc + offset), SEEK_END (size of file + offset)

    - reposition read/write file offset when syscall == "SYS_lseek"
        -> stdin (fd = 0), stdout (fd = 1), stderr (fd = 2) don't support lseek
        -> check whether fd is within range 
        -> save old offset
        -> check what whence equals and adjust appropriately
            == SEEK_SET -> filetable_offset[fd] = pos
            == SEEK_CUR -> filetable_offset[fd] += pos
            == SEEK_END -> use VOP_STAT, filetable_offset[fd] = (filestat.st_size -1) + pos

        -> use VOP_TRYSEEK() to check if the new pos is legal, on a legal file 
        -> return either the new offset or old offset

Errors to handle
- File type is STD
- File is null
- Incorrect whence value
- VOP_ISSEEKABLE returning an error number

~~~~close~~~~

    man page - http://man7.org/linux/man-pages/man2/close.2.html

    int close(int fd)

    - fd = file descriptor 

    - closes a file descriptor when syscall == "SYS_close"
        -> stdin (fd = 0), stdout (fd = 1), stderr (fd = 2) don't support close
        -> check for valid fd and dup
        -> close all dups for this file
        -> clean up with vfs_close(), free memory and set offset to null

Errors to handle
-   file != NULL && file->isDup == 0

~~~~dup2~~~~

    man page - http://man7.org/linux/man-pages/man2/dup.2.html

    int dup2(int oldfd, int newfd)

    - oldfd = old file descriptor 
    - newfd = new file descriptor 

    - duplicate a file descriptor when syscall == "SYS_dup2"
        -> save oldfd
        -> check if fds are out of range 
        -> if newfd is in the file table, close it
        -> check if we already have one dup of the oldfd
        -> update file table by update linked list

Errors to handle
-   oldfile == NULL || newfile == NULL
-   close returning an error number
-   oldfile == NULL

~~~~~~~~~~~ setup ~~~~~~~~~~~
cd ~/cs3231/asst2-src
./configure
cd ~/cs3231/asst2-src
bmake
bmake install
cd ~/cs3231/asst2-src/kern/conf
./config ASST2
cd ../compile/ASST2
bmake depend
bmake
bmake install
cd ~/cs3231/root

~~~~~~~~~~~ testing ~~~~~~~~~~~
sys161 kernel "p /testbin/asst2"

~~~~~~~~~~~ git ~~~~~~~~~~~
git commit . -m"bug fixes but still major bug in the linked list"
git push -u origin master